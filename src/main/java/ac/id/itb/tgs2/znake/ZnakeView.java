/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ac.id.itb.tgs2.znake;

import info.clearthought.layout.TableLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import javax.swing.SwingWorker;

/**
 *
 * @author edbert
 */
public class ZnakeView extends javax.swing.JFrame {

    Znake znake;
    SwingWorker<String, Void> znakeThread;
    volatile int direction = ZnakeConstants.EAST;
    volatile boolean running = true;
    KeyAdapter keyAdapter;

    /**
     * Creates new form ZnakeView
     */
    public ZnakeView() {
        initComponents();
        initializeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 388, 350);
    }// </editor-fold>//GEN-END:initComponents

    private void initializeComponents() {
        znake = new Znake();
        znake.generateBody(7, 3, 3);

        double[][] size = new double[2][];
        size[0] = new double[ZnakeConstants.BOARD_WIDTH];
        size[1] = new double[ZnakeConstants.BOARD_HEIGHT];
        for (int i = 0; i < ZnakeConstants.BOARD_WIDTH; i++) {
            size[0][i] = 10;
        }
        for (int i = 0; i < ZnakeConstants.BOARD_HEIGHT; i++) {
            size[1][i] = 10;
        }
        jPanel1.setLayout(new TableLayout(size));

        for (int i = 0; i < znake.getZnakeBodyParts().size(); i++) {
            ZnakeBodyPart zbp = znake.getZnakeBodyParts().get(i);
            jPanel1.add(
                zbp,
                String.format("%s, %s", zbp.getPosition().x, zbp.getPosition().y)
            );
        }

        keyAdapter = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (direction != ZnakeConstants.NORTH && direction != ZnakeConstants.SOUTH) {
                            direction = ZnakeConstants.NORTH;
                        }
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (direction != ZnakeConstants.WEST && direction != ZnakeConstants.EAST) {
                            direction = ZnakeConstants.EAST;
                        }
                        break;
                    case KeyEvent.VK_DOWN:
                        if (direction != ZnakeConstants.NORTH && direction != ZnakeConstants.SOUTH) {
                            direction = ZnakeConstants.SOUTH;
                        }
                        break;
                    case KeyEvent.VK_LEFT:
                        if (direction != ZnakeConstants.WEST && direction != ZnakeConstants.EAST) {
                            direction = ZnakeConstants.WEST;
                        }
                        break;
                }
            }
        };
        addKeyListener(keyAdapter);

        znakeThread = new SwingWorker<String, Void>() {

            @Override
            protected String doInBackground() throws Exception {
                while (running) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                    }
                    znake.move(direction);
                    jPanel1.removeAll();
                    for (int i = 0; i < znake.getZnakeBodyParts().size(); i++) {
                        ZnakeBodyPart zbp = znake.getZnakeBodyParts().get(i);
                        jPanel1.add(
                            zbp,
                            String.format("%s, %s", zbp.getPosition().x, zbp.getPosition().y)
                        );
                    }
                    //jPanel1.repaint();
                    jPanel1.revalidate();
                    System.out.println("========================================");
                    znake.printBodyParts();
                }
                return null;
            }
        };
        znakeThread.execute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
