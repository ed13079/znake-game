package itb.rpl.ppl.tgs2.znake.view;

import itb.rpl.ppl.tgs2.znake.util.ZnakeConstants;
import itb.rpl.ppl.tgs2.znake.util.command.*;
import itb.rpl.ppl.tgs2.znake.controller.ZnakeController;
import itb.rpl.ppl.tgs2.znake.model.snake.Znake;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import javax.swing.*;
//import javax.swing.SwingWorker;

/**
 *
 * @author edbert
 */
public class ZnakeView extends javax.swing.JFrame {

    private ZnakeController engine;
    private KeyAdapter keyAdapter;
    private JPanel northPanel;
    private JPanel scorePanel;
    private JLabel scoreLabel;
    private PropertyChangeListener scoreListener;

    /**
     * Creates new form ZnakeView
     */
    public ZnakeView() {
        initComponents();
        initializeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeComponents() {
        
        // Znake controller
        engine = new ZnakeController();
        keyAdapter = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                ZnakeCommand cmd = null;
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        cmd = new MoveUpCommand(engine.getZnakeOperation());
                        break;
                    case KeyEvent.VK_RIGHT:
                        cmd = new MoveRightCommand(engine.getZnakeOperation());
                        break;
                    case KeyEvent.VK_DOWN:
                        cmd = new MoveDownCommand(engine.getZnakeOperation());
                        break;
                    case KeyEvent.VK_LEFT:
                        cmd = new MoveLeftCommand(engine.getZnakeOperation());
                        break;
                    //default:
                        //cmd = new MoveCommand(engine.getZnakeOperation());
                }
                cmd.execute();
            }
        };
        addKeyListener(keyAdapter);
        this.add(engine.getPanel());
        engine.run();
        
        setBounds(
            0, 0, 
            (ZnakeConstants.BOARD_WIDTH * ZnakeConstants.DOT_WIDTH) + 20,
            (ZnakeConstants.BOARD_HEIGHT * ZnakeConstants.DOT_HEIGHT) + 70);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
